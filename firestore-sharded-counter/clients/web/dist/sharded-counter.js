var sharded=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);t.exports=function(){return n(r),r}}else{var o=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),o[e]=t>>>((3&e)<<3)&255;return o}}},function(t,e){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);t.exports=function(t,e){var r=e||0,o=n;return[o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],"-",o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]],o[t[r++]]].join("")}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{a(r.next(t))}catch(t){i(t)}}function u(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,u)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),s="_counter_shards_",u="FIRESTORE_COUNTER_SHARD_ID",a=function(){function t(t,e){this.doc=t,this.field=e,this.db=null,this.shardId="",this.shards={},this.notifyPromise=null,this.db=t.firestore,this.shardId=function(t){var e=new RegExp("(?:^|; )"+encodeURIComponent(t)+"=([^;]*)").exec(document.cookie);if(e)return e[1];var n=i.v4(),r=new Date;r.setTime(r.getTime()+2592e6);var o="; expires="+r.toUTCString();return document.cookie=encodeURIComponent(t)+"="+n+o+"; path=/",n}(u);var n=t.collection(s);this.shards[t.path]=0,this.shards[n.doc(this.shardId).path]=0,this.shards[n.doc("\t"+this.shardId.substr(0,4)).path]=0,this.shards[n.doc("\t\t"+this.shardId.substr(0,3)).path]=0,this.shards[n.doc("\t\t\t"+this.shardId.substr(0,2)).path]=0,this.shards[n.doc("\t\t\t\t"+this.shardId.substr(0,1)).path]=0}return t.prototype.get=function(t){return r(this,void 0,void 0,function(){var e,n=this;return o(this,function(i){switch(i.label){case 0:return e=Object.keys(this.shards).map(function(e){return r(n,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,this.db.doc(e).get(t)];case 1:return[2,n.sent().get(this.field)||0]}})})}),[4,Promise.all(e)];case 1:return[2,i.sent().reduce(function(t,e){return t+e},0)]}})})},t.prototype.onSnapshot=function(t){var e=this;Object.keys(this.shards).forEach(function(n){e.db.doc(n).onSnapshot(function(n){e.shards[n.ref.path]=n.get(e.field)||0,null===e.notifyPromise&&(e.notifyPromise=function(t){return r(this,void 0,void 0,function(){var e=this;return o(this,function(n){return[2,new Promise(function(n){return r(e,void 0,void 0,function(){var e=this;return o(this,function(i){return setTimeout(function(){return r(e,void 0,void 0,function(){var e;return o(this,function(r){return e=t(),n(e),[2]})})},0),[2]})})})]})})}(function(){var n=Object.values(e.shards).reduce(function(t,e){return t+e},0);t({exists:!0,data:function(){return n}}),e.notifyPromise=null}))})})},t.prototype.incrementBy=function(t){var e=this.field.split(".").reverse().reduce(function(t,e){var n;return(n={})[e]=t,n},t);return this.doc.collection(s).doc(this.shardId).set(e,{merge:!0})},t.prototype.shard=function(){return this.doc.collection(s).doc(this.shardId)},t}();e.Counter=a},function(t,e,n){var r=n(4),o=n(5),i=o;i.v1=r,i.v4=o,t.exports=i},function(t,e,n){var r,o,i=n(0),s=n(1),u=0,a=0;t.exports=function(t,e,n){var c=e&&n||0,d=e||[],f=(t=t||{}).node||r,l=void 0!==t.clockseq?t.clockseq:o;if(null==f||null==l){var h=i();null==f&&(f=r=[1|h[0],h[1],h[2],h[3],h[4],h[5]]),null==l&&(l=o=16383&(h[6]<<8|h[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),v=void 0!==t.nsecs?t.nsecs:a+1,y=p-u+(v-a)/1e4;if(y<0&&void 0===t.clockseq&&(l=l+1&16383),(y<0||p>u)&&void 0===t.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");u=p,a=v,o=l;var b=(1e4*(268435455&(p+=122192928e5))+v)%4294967296;d[c++]=b>>>24&255,d[c++]=b>>>16&255,d[c++]=b>>>8&255,d[c++]=255&b;var m=p/4294967296*1e4&268435455;d[c++]=m>>>8&255,d[c++]=255&m,d[c++]=m>>>24&15|16,d[c++]=m>>>16&255,d[c++]=l>>>8|128,d[c++]=255&l;for(var g=0;g<6;++g)d[c+g]=f[g];return e||s(d)}},function(t,e,n){var r=n(0),o=n(1);t.exports=function(t,e,n){var i=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var u=0;u<16;++u)e[i+u]=s[u];return e||o(s)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,