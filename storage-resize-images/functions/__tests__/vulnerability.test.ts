const firebase = require("firebase/app");
const firebaseAuth = require("firebase/auth");
const firebaseStorage = require("firebase/storage");
const fs = require("fs");

const util = require("util");
const exec = util.promisify(require("child_process").exec);

/**
 * e2e testing for discovered storage vulnerability
 */

// Initialize Firebase app first
firebase.initializeApp({
  apiKey: "AIzaSyDQ28IxvaYUWcuo5uV0rO4h0-NLRkgJtSQ",
  authDomain: "extensions-testing.firebaseapp.com",
  databaseURL: "https://extensions-testing.firebaseio.com",
  projectId: "extensions-testing",
  storageBucket: "extensions-testing.appspot.com",
  messagingSenderId: "219368645393",
  appId: "1:219368645393:web:742707ef8625019b6862b0",
  measurementId: "G-ZJJCKG8RT6",
});

// Now get references to the Firebase services
const auth = firebaseAuth.getAuth();
const storage = firebaseStorage.getStorage();

/** basic configuration */
const username = "user2@hacker.com";
const password = "L33tH4cker";

describe("failed resize vulnerability", () => {
  let userId;
  let filePath;
  let dest;
  let project_id;
  let bucketName;

  beforeAll(async () => {
    /** config */
    userId = "RiosyEksHRYop824nECwfBIuJmn1";
    filePath = "/../fixtures/config_hack.txt";
    dest = `users/${userId}/images/../../../config.json`;
    project_id = "extensions-testing";
    bucketName = `gs://${project_id}.appspot.com`;
  });
  test("should not write a file to a storage subdirectory", async () => {
    /** Upload the original file */
    // const configRef = firebaseStorage.ref(storage, "config.json");

    /** Get the file buffer */
    // const buffer = fs.readFileSync(__dirname + "/../fixtures/config.json");

    /** Upload the original file */
    // await firebaseStorage.uploadBytes(configRef, buffer).then(() => {
    //   console.log("File upload succeed");
    // });

    /** Wait for 5 seconds to propegate */
    await new Promise((resolve) => setTimeout(resolve, 5000));
    console.log(`Step 1: Get the original ${bucketName}/config.json`);

    /** Copy the config file from storage to a local temp directory */
    await exec(`gcloud storage cp ${bucketName}/config.json ./tmp/config.json`);

    /** Check the file exists in the temp folder */
    expect(fs.existsSync("./tmp/config.json")).toBe(true);

    /** Confirm correct files are in place */
    await exec(`echo 'Step 2:' && cat ./tmp/config.json`).then(({ stdout }) => {
      expect(stdout.trim()).toEqual('Step 2:\n{\n    "some" : "secret"\n}');
    });

    /** Add logging */
    console.log("Step2: Overwrite global storage file /config.json");

    /** Overwrite global storage file /config.json  */
    await firebaseAuth
      .signInWithEmailAndPassword(auth, username, password)
      .then(async (userCredential) => {
        console.log(`Sign in with ${username}`);
        const metadata = {
          contentType: "image/png",
        };

        const pic = fs.readFileSync(__dirname + filePath, {
          encoding: "ascii",
        });
        const picRef = firebaseStorage.ref(storage, dest);
        console.log(`Uploading source file: ${filePath} at dest: ${dest}`);
        firebaseStorage
          .uploadString(picRef, pic, "data_url", metadata)
          .then(() => {
            console.log("File upload succeed");
          });
      });

    /** Wait for 5 seconds */
    await new Promise((resolve) => setTimeout(resolve, 5000));

    /** Log progress */
    console.log(`Step 3: Overwritten ${bucketName}/config.json`);
    await exec(`gcloud storage cp ${bucketName}/config.json ./tmp/config.json`);

    /** Wait for 5 seconds to propegate */
    await new Promise((resolve) => setTimeout(resolve, 5000));

    /** Check file */
    await exec(`echo 'Step 4:' && cat ./tmp/config.json`).then(({ stdout }) => {
      /** Check file */
      expect(stdout.trim()).toEqual('Step 4:\n{\n    "some" : "secret"\n}');
    });

    /** Clear file */
    // await exec(`echo 'Step 5:' && rm -f ./tmp/config.json`).then(
    //   ({ stdout }) => {
    //     /** Check file */
    //     expect(stdout.trim()).toEqual("Step 5:");
    //   }
    // );

    /** Check results */
    expect(true).toBe(true);
  }, 60000);
});

describe("allowed paths vulnerability", () => {
  let userId;
  let secondaryUserId;
  let filePath;
  let dest;
  let project_id;
  let bucketName;

  beforeAll(async () => {
    /** config */
    userId = "RiosyEksHRYop824nECwfBIuJmn1";
    secondaryUserId = "UuAG5c2Iyqec9fKlNo4dJYsp5B23";
    filePath = "/../fixtures/config_hack.txt";
    dest = `users/${userId}/images/../../${secondaryUserId}/config.json`;
    project_id = "extensions-testing";
    bucketName = `gs://${project_id}.appspot.com`;
  });

  test("should not write a file to a storage subdirectory", async () => {
    /** Upload the original file */
    // const configRef = firebaseStorage.ref(storage, "config.json");

    /** Get the file buffer */
    // const buffer = fs.readFileSync(__dirname + "/../fixtures/config.json");

    /** Upload the original file */
    // await firebaseStorage.uploadBytes(configRef, buffer).then(() => {
    //   console.log("File upload succeed");
    // });

    /** Wait for 5 seconds to propegate */
    await new Promise((resolve) => setTimeout(resolve, 5000));
    console.log(
      `Step 1: "Get original user1@example.com settings.json ${bucketName}/users/${secondaryUserId}/settings.json"`
    );

    /** Copy the config file from storage to a local temp directory */
    await exec(
      `gcloud storage cp ${bucketName}/users/${secondaryUserId}/settings.json ./tmp/settings.json
`
    );

    /** Check the file exists in the temp folder */
    expect(fs.existsSync("./tmp/settings.json")).toBe(true);

    /** Confirm correct files are in place */
    await exec(`echo 'Step 2:' && cat ./tmp/settings.json`).then(
      ({ stdout }) => {
        expect(stdout.trim()).toEqual('Step 2:\n{\n    "status" : "active"\n}');
      }
    );

    /** Add logging */
    console.log(
      `Step2: Overwrite user file /users/${secondaryUserId}/settings.json`
    );

    /** Overwrite global storage file /config.json  */
    await firebaseAuth
      .signInWithEmailAndPassword(auth, username, password)
      .then(async (userCredential) => {
        console.log(`Sign in with ${username}`);
        const metadata = {
          contentType: "image/png",
        };

        const pic = fs.readFileSync(__dirname + filePath, {
          encoding: "ascii",
        });
        const picRef = firebaseStorage.ref(storage, dest);
        console.log(`Uploading source file: ${filePath} at dest: ${dest}`);
        firebaseStorage
          .uploadString(picRef, pic, "data_url", metadata)
          .then(() => {
            console.log("File upload succeed");
          });
      });

    /** Wait for 5 seconds */
    await new Promise((resolve) => setTimeout(resolve, 5000));

    /** Log progress */
    console.log(
      `Step 3: Overwritten ${bucketName}/users/${secondaryUserId}/settings.json`
    );
    await exec(
      `gcloud storage cp ${bucketName}/users/${secondaryUserId}/settings.json ./tmp/settings.json`
    );

    /** Wait for 5 seconds to propegate */
    await new Promise((resolve) => setTimeout(resolve, 5000));

    /** Check file */
    await exec(`echo 'Step 4:' && cat ./tmp/settings.json`).then(
      ({ stdout }) => {
        /** Check file */
        expect(stdout.trim()).toEqual('Step 4:\n{\n    "status" : "active"\n}');
      }
    );
  }, 60000);
});
