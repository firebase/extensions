# Copyright 2019 Google LLC
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.

name: image-resizer
displayName: Automatically resize an image uploaded to Cloud Storage for Firebase
specVersion: v1beta1
version: 0.1.0

description:
  Automatically generate resized images for images uploaded to Cloud Storage for
  Firebase.

license: MIT
billingRequired: false
sourceUrl: https://dev-partners.googlesource.com/samples/firebase/mods/+/master/image-resizer
releaseNotesUrl: https://dev-partners.googlesource.com/samples/firebase/mods/+/master/README.md

author:
  authorName: Firebase
  url: https://firebase.google.com
contributors:
  - authorName: Tina Liang
    url: https://github.com/tinaliang
  - authorName: Chris Bianca
    email: chris@csfrequency.com
    url: https://github.com/chrisbianca

apis:
  - apiName: storage-component.googleapis.com
    reason: Needed to use Cloud Storage

roles:
  - role: storage.admin
    reason: allows the mod to store generated images in Cloud Storage
  - role: iam.serviceAccountTokenCreator
    reason: allows the mod to generate signed URLs
  - role: firebasedatabase.admin
    reason: allows the mod to store signed URLs in the Realtime Database

resources:
  - name: generateResizedImage
    type: firebasemods.v1beta1.function
    #description: listen for new images, resize them and save them to cloud storage
    properties:
      location: ${LOCATION}
      eventTrigger:
        eventType: google.storage.object.finalize
        resource: projects/_/buckets/${IMG_BUCKET}

params:
  - param: LOCATION
    type: select
    label: Deployment Location
    description: >-
      Where should the mod be deployed? Pick a location that is close to your
      Firestore database. See
      https://firebase.google.com/docs/functions/locations#selecting_regions_for_firestore_and_storage.
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
  - param: IMG_BUCKET
    type: string
    label: Storage bucket to listen to for creation of resized images
    description: >
      What storage bucket will the images that are to be resized be uploaded to?
    default: ${STORAGE_BUCKET}
  - param: IMG_MAX_HEIGHT
    type: string
    label: Maximum height of resized image
    description: >
      What should be the maximum height of the resized image (in pixels)?
    # all default values must be strings, so number have to be wrapped in quotes
    default: "200"
    validationRegex: ^\d+$
    validationErrorMessage: Invalid height, must be a positive integer.
  - param: IMG_MAX_WIDTH
    type: string
    label: Maximum width of resized image
    description: >
      What should be the maximum width of the resized image (in pixels)?
    default: "200"
    validationRegex: ^\d+$
    validationErrorMessage: Invalid width, must be a positive integer.
  - param: SIGNED_URLS_PATH
    label:
      Path representing Realtime Database node where signed URLs for the resized
      image and original image will be uploaded
    description: >
      What would you like to name the node in Firebase Realtime Database under
      which signed URLs
      (https://cloud.google.com/storage/docs/access-control/signed-urls) for the
      resized image and original image will be uploaded? Signed URLs is a
      mechanism for query string authentication for buckets and objects. Signed
      URLs provide a way to give time-limited read or write access to anyone in
      possession of the URL, regardless of whether they have a Google account.
      This is not a required variable. If you would prefer not to use signed
      URLs, leave this field empty.
    required: false
  - param: SIGNED_URLS_EXPIRATION_DATE
    type: string
    label: Date after which the signed URLs will expire (format is MM-DD-YYYY)
    description: >
      After what date would you like the signed URLs to expire? Please input the
      date in MM-DD-YYYY format. If you would prefer not to use signed URLs,
      leave this field as the default.
    default: "03-01-2500"
    required: false
  - param: CACHE_CONTROL_HEADER
    label: Optional `cache-control` header for resized files
    description: >
      Would you like to specify a `cache-control` header for the resize image
      files? If you would prefer not to use a `cache-control` header, leave this
      field empty.
    required: false
